#!/usr/bin/env groovy
import hudson.model.*
import hudson.EnvVars
import groovy.json.JsonSlurper
import groovy.json.JsonBuilder
import groovy.json.JsonOutput
import jenkins.plugins.http_request.*
import java.net.URL
/**
 This is an example Jenkins Pipeline Script that runs a CI process against COBOL Code.  This pipeline is designed to be triggered from ISPW 
 on the promotion of code from a Test level in a controlled level.  The pipeline runs a series of quality checks on the 
 promoted code to ensure that it meets the quality standards that an organization defined in SonarQube.
 
 This Pipeline uses the following Jenkins Plugins
 Compuware Common Configuration Plugin - https://plugins.jenkins.io/compuware-common-configuration
 Compuware Source Code Download for Endevor, PDS, and ISPW Plugin - https://plugins.jenkins.io/compuware-scm-downloader
 Compuware Topaz for Total Test Plugin - https://plugins.jenkins.io/compuware-topaz-for-total-test
 Compuware Xpediter Code Coverage Plugin - https://plugins.jenkins.io/compuware-xpediter-code-coverage
 Pipeline Utilities Plugin - https://plugins.jenkins.io/pipeline-utility-steps
 SonarQube Scanner Plugin - https://plugins.jenkins.io/sonar
 XebiaLabs XL Release Plugin - https://plugins.jenkins.io/xlrelease-plugin
 
 This Pipeline Requires the below Parameters to be defined in the Jenkins Job
 The Jenkins Parameters can be supplied by a ISPW Webhook by defining a webhook like the example below.  
 Please note that the assignment is not currently available in the webhook, but will be added in a future release.
 http://<<your jenkins server>>/job/<<you jenkins job>>/buildWithParameters?ISPW_Stream=$$stream$$&ISPW_Container=$$release$$&ISPW_Level=$$levels$$&SetId=$$setID$$&ISPW_Release=$$release$$&Owner=$$owner$$
 
 ISPW Webhook Parameter List below
 @param ISPW_Stream - ISPW Stream that had the code promotion
 @param ISPW_Container - ISPW Container that had the code promotion
 @param ISPW_Level - ISPW Level that code was promoted from
 @param ISPW_SetId - ISPW Set that was created for the promotion
 @param ISPW_Release - The ISPW Release Value that will be passed to XL Release
 @param ISPW_Owner - The ISPW Owner value from the ISPW Set that was created for the promotion

 The Pipeline also takes the following parameters from the Jenkins Job
 @param CES_Token - CES Personal Access Token.  These are configured in Compuware Enterprise Services / Security / Personal Access Tokens 
 @param HCI_Conn_ID - HCI Connection ID configured in the Compuware Common Configuration Plugin.  Use Pipepline Syntax Generator to determine this value. 
 @param HCI_Token - The ID of the Jenkins Credential for the TSO ID that will used to execute the pipeline
 @param CES_Connection - The URL of Compuware Enterprise Services
 @param CC_repository - The Compuware Xpediter Code Coverage Repository that the Pipeline will use
 @param Git_Project - Github project/user used to store the Topaz for Total Test Projects
*/
/**
 Below is a list of parameters that is hardcoded into the Pipeline
 @param Git_Credentials - Jenkins credentials for logging into git
 @param Git_URL - Url that will be used in various git commands
 @param Git_TTT_Repo - Git repo that contains Topaz for Total Test Projects
 @param Git_Branch - Git brnach to be used by the pipeline
 @param SQ_Scanner_Name - Name of SonarQube Scanner installation in "Manage Jenkins" -> "Global Tool Configuration" -> "SonarQube Scanner Installations"
 @param SQ_Server_Name - Name of SonarQube Server in "Manage Jenkins" -> "Configure System" -> "Sonar Qube servers"
 @param MF_Source - directory that contains cobol source downloaded from ISPW
 @param XLR_Template - XL Release template to trigger at the end of the Jenkins workflow
 @param XLR_User - XL Release user ID. Configured in Jenkins/Manage Jenkins/Configure System/XL Release credentials
*/
 String Git_Credentials      = "87763671-db9a-47e1-80e7-33c1aba803b1"
 String Git_URL              = "https://github.com/${Git_Project}"
 String Git_TTT_Repo         = "${ISPW_Stream}_${ISPW_Application}_Unit_Tests"
 String Git_Branch           = "master"
 String SQ_Scanner_Name      = "Scanner" 
 String SQ_Server_Name       = "localhost"  
 String MF_Source            = "MF_Source"
 String XLR_Template         = "A Release from Jenkins"
 String XLR_User	         = "admin"	
 String CES_Token_Clear      = "665fc9fb-39de-428a-8a67-a3619752873d"
		 
/**
 Helper Methods for the Pipeline Script
*/

/**
 Determine the ISPW Path Number for use in Total Test
 @param Level - Level Parameter is the Level returned in the ISPW Webhook
*/
 def String getPathNum(String Level)
 {
    return Level.charAt(Level.length() - 1)
 }

/**
 Wrapper around the Git Plugin's Checkout Method
 @param URL - URL for the git server
 @param Branch - The branch that will be checked out of git
 @param Credentials - Jenkins credentials for logging into git
 @param Folder - Folder relative to the workspace that git will check out files into
*/
 def gitcheckout(String URL, String Branch, String Credentials, String Folder)
 {
        println "Scenario " + URL
        println "Scenario " + Branch
        println "Scenario " + Credentials
        checkout changelog: false, poll: false, 
        scm: [$class: 'GitSCM', 
        branches: [[name: '**']], 
        doGenerateSubmoduleConfigurations: false, 
        extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: "${Folder}"]], 
        submoduleCfg: [], 
        userRemoteConfigs: [[credentialsId: "${Credentials}", name: "origin", url: "${URL}"]]]
 }

@NonCPS
 def Map getSetMap(ResponseContentSupplier response)
 {
    def jsonSlurper = new JsonSlurper()
    def returnMap   = [:]
    def resp        = jsonSlurper.parseText(response.getContent())

    if(resp.message != null)
    {
        echo "Resp: " + resp.message
        error
    }
    else
    {
        def taskList = resp.tasks

        taskList.each
        {
            if(it.moduleType == 'COB' && it.level == 'QA3')
            {
                returnMap.put(it.taskId, it.moduleName) 
            }
        }
    }

    return returnMap
 }

@NonCPS
 def ArrayList getAssigmentList(Map setMap, ResponseContentSupplier response)
 {
    def jsonSlurper = new JsonSlurper()
    def returnList  = []

    def resp        = jsonSlurper.parseText(response.getContent())

    if(resp.message != null)
    {
        echo "Resp: " + resp.message
        error
    }
    else
    {
        def taskList = resp.tasks

        taskList.each
        {
            if(setMap.containsKey(it.taskId))
            {
                if(!(returnList.contains(it.container)))
                {
                    returnList.add(it.container)        
                }
            }
        }
    }
    return returnList    
 }

// One node with several stages => All variables are local to the node and available to all stages
node{

    def PathNum = getPathNum(ISPW_Src_Level)

    // Use the Path Number to determine the right Runner JCL to use (different STEPLIB concatenations)
    def TTT_Jcl = "Runner_PATH" + PathNum + ".jcl"

    def ISPW_Target_Level = "QA" + PathNum

    def response1 = steps.httpRequest(url: "http://cwcc.compuware.com:2020/ispw/ispw/sets/${ISPW_SetId}/tasks",
        httpMode: 'GET',
        consoleLogResponseBody: false,
        customHeaders: [[maskValue: true, name: 'authorization', value: "${CES_Token_Clear}"]]
    )

    def setMap          = getSetMap(response1)

    def response2 = steps.httpRequest(url: "http://cwcc.compuware.com:2020/ispw/ispw/releases/${ISPW_Release}/tasks",
        consoleLogResponseBody: false, 
        customHeaders: [[maskValue: true, name: 'authorization', value: "${CES_Token_Clear}"]]
    )

    def assignmentList  = getAssigmentList(setMap, response2)

    for(int i = 0, i < assignmentList.size(), i++)
    {
        println "Assigment " assignmentList[i].toString()
    }

    def CC_DDIO_Override     = "SALESSUP.${ISPW_Application}.${ISPW_Target_Level}.SSD"

    // Download all sources from the desired level and above
    println "******************************"
    println "Download Source Code from ISPW"
    println "******************************"

    stage("Download Source Code")
    {

        checkout(changelog: false, poll: false, 
            scm: [$class: 'IspwConfiguration', 
                componentType: 'COB, COPY', 
                connectionId: "${HCI_Conn_ID}", 
                credentialsId: "${HCI_Token}", 
                folderName: '', 
                ispwDownloadAll: true, 
                levelOption: '1', 
                serverApplication: "${ISPW_Application}",
                serverConfig: "",  
//                serverConfig: "${ISPW_RuntimeConfig}", 
                serverLevel: "${ISPW_Target_Level}", 
                serverStream: "${ISPW_Stream}"])
    }

    println "*******************"
    println "Download Unit Tests"
    println "*******************"    

    echo "Branch - " + Git_Branch
    echo "Credentials - " + Git_Credentials
    echo "URL - " + Git_URL

    // Download all available Unit Tests
    stage("Download Unit Tests")
    {
        checkout changelog: false, poll: false, 
            scm: [$class: 'GitSCM', 
                branches: [[name: "*/${Git_Branch}"]], 
                doGenerateSubmoduleConfigurations: false, 
                extensions: [], 
                submoduleCfg: [], 
                userRemoteConfigs: [[credentialsId: "${Git_Credentials}", name: 'origin', url: "${Git_URL}/${Git_TTT_Repo}"]]]
    }

    // findFiles requires the "Pipeline Utilities Plugin"
    // Get all testscenario files in the current workspace into an array of type File
    def TTTListOfScenarios = findFiles(glob: '**/*.testscenario')

    // Get all Sources in the MF_Source folder into an Array
    def ListOfSources  = findFiles(glob: "**/${ISPW_Application}/${MF_Source}/*.cbl")

    def ListOfPrograms = []
    
    ListOfSources.each
    {
        ListOfPrograms.add(it.name.trim().split("\\.")[0])
    }

    stage("Unit Tests")
    {
        // Search all downloaded testscenarios and loop through them
        println "*************************"
        println "Loop through TTT projects"
        println "*************************"

        // Loop through all downloaded TTT scenarios
        TTTListOfScenarios.each
        {
            def TTTScenarioPath = it.path
            // Get root node of the path, i.e. the name of the TTT project
            // The split method uses regex to search for patterns, therefore
            // Backslahes, Dots and Underscores which mean certain patterns in regex need to be escaped 
            // The backslash in Windows paths is duplicated in Java, therefore it need to be escaped twice
            def TTTProjectName         = it.path.trim().split("\\\\")[0]   // TTT Project name is the root folder of the full path to the testscenario 
            def TTTScenarioFullName    = it.name                           // Get the full name of the testscenario file i.e. "name.testscenario"
            def TTTScenarioName        = it.name.trim().split("\\.")[0]    // Get the name of the scenario file without ".testscenario"
            def TTTScenarioTarget      = TTTScenarioName.split("\\_")[0]      // Target Program will be the first part of the scenario name (convention)
    
            // For each of the scenarios walk through the list of new scources and determine if the target matches one of the programs
            // In that case, execute the unit test
            
            //Determine if the program name matches the target of the TTT scenario
            if(ListOfPrograms.contains(TTTScenarioTarget))
            {
                println "*************************"
                println "Scenario " + TTTScenarioFullName
                println "Path " + TTTScenarioPath
                println "Project " + TTTProjectName
                println "*************************"
            
                step([$class: 'TotalTestBuilder', 
                    ccClearStats: false,
                    ccRepo: "${CC_repository}",
                    ccSystem: "${ISPW_Application}", 
                    ccTestId: "${BUILD_DISPLAY_NAME}",  //Jenkins environemnt variable, resolves to build number, i.e. #177 
                    credentialsId: "${HCI_Token}", 
                    deleteTemp: true, 
                    hlq: '', 
                    connectionId: "${HCI_Conn_ID}",
                    jcl: "${TTT_Jcl}", 
                    projectFolder: "${TTTProjectName}", 
                    testSuite: "${TTTScenarioFullName}", 
                    useStubs: true])                    
            }
        }

        // Process the Total Test result files into Jenkins
        junit allowEmptyResults: true, keepLongStdio: true, testResults: "TTTUnit/*.xml"
    }

    // Download CoCo Results from Test Runs
    println "****************"
    println "Gather CoCo Data"
    println "****************"

    stage("Gather CoCo Data")
    {
        string sources="${ISPW_Application}\\${MF_Source}"
        def ccproperties   = 'cc.sources=' + sources + '\rcc.repos=' + CC_repository + '\rcc.system=' + ISPW_Application + "*" + '\rcc.test=' + BUILD_DISPLAY_NAME + '\rcc.ddio.overrides=' + CC_DDIO_Override

        step([$class: 'CodeCoverageBuilder',
            analysisProperties: ccproperties,
                analysisPropertiesPath: '',
                connectionId: "${HCI_Conn_ID}",
                credentialsId: "${HCI_Token}"])
    }

    // Analyse Sources, Test Results and Coverage in SonarQube
    println "******************"
    println "SonarQube analysis"
    println "******************"

    stage("SonarQube analysis") 
    {
        // Requires SonarQube Scanner 2.8+
        def scannerHome = tool "${SQ_Scanner_Name}";
        
        //def SonarTestDirsNames = []
        //def SonarTestDirs = ''
        //def SonarTestExecutionReportPaths = ''

        // Build a comma separated list of 
        //    test directories passed, using -Dsonar.test parameter and
        //    test execution report paths, using -Dsonar.testExecutionReportPaths parameter
        //TTTListOfScenarios.each
        //{

            //def TTTProjectName = it.path.trim().split("\\\\")[0] 
            //def TTTScenarioName = it.name.trim().split("\\.")[0]
           
            //if(SonarTestDirsNames.contains(TTTProjectName)==false)
            //{
            //    //    the first list must not contain duplicates, therefore we need additional logic
            //    SonarTestDirsNames.add(TTTProjectName)
            //    if(SonarTestDirs == '') 
            //    {
            //        SonarTestDirs = SonarTestDirs + './' + TTTProjectName
            //    }
            //    else
            //    {
            //        SonarTestDirs = SonarTestDirs + ',./' + TTTProjectName
            //    }
            //}

            //if(SonarTestExecutionReportPaths == '')
            //{
            //    SonarTestExecutionReportPaths = SonarTestExecutionReportPaths + 'TTTSonar/' + TTTScenarioName + '.xml'
            //}
            //else
            //{
            //    SonarTestExecutionReportPaths = SonarTestExecutionReportPaths + ',TTTSonar/' + TTTScenarioName + '.xml'
            //}


        //}

        //Finds all of the TTT results files that will be submitted to SonarQube
        def TTTListOfResults    = findFiles(glob: 'TTTSonar/*.xml')
        def SQ_TestResult       = "-Dsonar.testExecutionReportPaths="

        TTTListOfResults.each
        {
            // Get the full name of the testscenario file i.e. "name.testscenario"
            def TTTResultName    = it.name     
            // Build the list of Result Folder name; the list is comma separated, a superflous comma at the end of the list is ignored by SonarQube
            SQ_TestResult = SQ_TestResult + "TTTSonar/" + TTTResultName + ','
        }

        withSonarQubeEnv("${SQ_Server_Name}") 
        {
            // Run SonarQube Scanner 
            def SQ_Tests                = " -Dsonar.tests=./ ${SQ_TestResult} -Dsonar.coverageReportPaths=Coverage/CodeCoverage.xml"
            def SQ_ProjectKey           = " -Dsonar.projectKey=${SQ_Project} -Dsonar.projectName=${SQ_Project} -Dsonar.projectVersion=1.0"
            def SQ_Source               = " -Dsonar.sources=${ISPW_Application}\\${MF_Source}"
            def SQ_Copybook             = " -Dsonar.cobol.copy.directories=${ISPW_Application}\\${MF_Source}"
            def SQ_Cobol_conf           = " -Dsonar.cobol.file.suffixes=cbl,testsuite,testscenario,stub -Dsonar.cobol.copy.suffixes=cpy -Dsonar.sourceEncoding=UTF-8"
            bat "${scannerHome}/bin/sonar-scanner" + SQ_Tests + SQ_ProjectKey + SQ_Source + SQ_Copybook + SQ_Cobol_conf
        }

    }

    // Check Quality Gate from SonarQube Scanner
    println "******************"
    println "Check Quality Gate"
    println "******************"

    stage("Check Quality Gate")
    {
        // Wait for webhook call back from SonarQube
        def qg = waitForQualityGate()

        timeout(time: 2, unit: 'MINUTES') 
        {
            if (qg.status != 'OK')
            {
                // If the quality gate is anything other than Green, regress the promoted code                
                println "**********************************************************"
                println "Pipeline aborted due to quality gate failure: ${qg.status}"
                println "Will regress assignemt: ${ISPW_Assignment}, Level: ${ISPW_Target_Level}"
                println "**********************************************************"

                //def ISPW_Assignment_Parm        = "assignmentId=" + ISPW_Assignment
                //def ISPW_Level_Parm             = '\nlevel=' + ISPW_Target_Level
                /def ISPW_Runtime_Config_Parm    = '\nruntimeConfiguration=' + ISPW_RuntimeConfig
                //def ISPW_Remain_Parms           = '\nevents.name=Completed\nevents.body=Regressed\nevents.httpHeaders=Jenkins-Crumb:no-crumb\nevents.credentials=admin:library'

                //ISPW_Parms = ISPW_Assignment_Parm + ISPW_Level_Parm + ISPW_Runtime_Config_Parm// + ISPW_Remain_Parms
                
                /*
                try
                {
                    ispwOperation consoleLogResponseBody: true,
                        connectionId: HCI_Conn_ID, 
                        credentialsId: CES_Token, 
                        ispwAction: 'RegressAssignment', 
                        ispwRequestBody: ISPW_Parms
                }
                catch(IllegalStateException exception)
                {
                }
                */
                /*
                response3 = steps.httpRequest(url: "http://cwcc.compuware.com:2020/ispw/ispw/assignments/${assigmentList[0].toString()}/tasks/regress?level=${ISPW_Target_Level}",
                    httpMode: 'POST',
                    consoleLogResponseBody: false,
                    customHeaders: [[maskValue: true, name: 'authorization', value: "${CES_Token_Clear}"]]
                )
                */
                println "Will abort the pipeline"

                def mailRecipients = "ralph.nuesse@compuware.com"
                    
                // Email
                emailext subject: '$DEFAULT_SUBJECT',
                            body: '$DEFAULT_CONTENT',
                            //body: '$DEFAULT_CONTENT',
                            replyTo: '$DEFAULT_REPLYTO',
                            //attachmentsPattern: 'reports/*.zip',
                            to: "${mailRecipients}"

                error "Exiting Pipeline"
            }

            else
            {
                // Trigger XL Release Jenkins Plugin to kickoff a Release                
                println "**********************************************************"
                println "Quality Gate status is: {${qg.status}"
                println "Will Start XL Release"
                println "**********************************************************"

                stage("Start Release")
                {                    
                    xlrCreateRelease releaseTitle: 'Release for $BUILD_TAG', 
                        serverCredentials: "${XLR_User}", 
                        startRelease: true, 
                        template: "${XLR_Template}", 
                        variables: [[propertyName: 'ISPW_Dev_level', propertyValue: "${ISPW_Target_Level}"], 
                            [propertyName: 'ISPW_Stg_Level', propertyValue: "${ISPW_Target_Level}"], 
                            [propertyName: 'ISPW_RELEASE_ID', propertyValue: "${ISPW_Release}"], 
                            [propertyName: 'CES_Token', propertyValue: "${CES_Token}"]]
                }

            }
        }
    } 
}