#!/usr/bin/env groovy
import hudson.model.*
import hudson.EnvVars
import groovy.json.JsonSlurper
import groovy.json.JsonBuilder
import groovy.json.JsonOutput
import java.net.URL

/**
 This is an example Jenkins Pipeline Script that runs a CI process against COBOL Code.  This pipeline is designed to be triggered from ISPW 
 on the promotion of code from a Test level in a controlled level.  The pipeline runs a series of quality checks on the 
 promoted code to ensure that it meets the quality standards that an organization defined in SonarQube.
 
 This Pipeline uses the following Jenkins Plugins
 Compuware Common Configuration Plugin - https://plugins.jenkins.io/compuware-common-configuration
 Compuware Source Code Download for Endevor, PDS, and ISPW Plugin - https://plugins.jenkins.io/compuware-scm-downloader
 Compuware Topaz for Total Test Plugin - https://plugins.jenkins.io/compuware-topaz-for-total-test
 Compuware Xpediter Code Coverage Plugin - https://plugins.jenkins.io/compuware-xpediter-code-coverage
 Pipeline Utilities Plugin - https://plugins.jenkins.io/pipeline-utility-steps
 SonarQube Scanner Plugin - https://plugins.jenkins.io/sonar
 XebiaLabs XL Release Plugin - https://plugins.jenkins.io/xlrelease-plugin
 
 This Pipeline Requires the below Parameters to be defined in the Jenkins Job
 The Jenkins Parameters can be supplied by a ISPW Webhook by defining a webhook like the example below.  
 Please note that the assignment is not currently available in the webhook, but will be added in a future release.
 http://<<your jenkins server>>/job/<<you jenkins job>>/buildWithParameters?ISPW_Stream=$$stream$$&ISPW_Container=$$release$$&ISPW_Level=$$level$$&ISPW_SetId=$$setID$$&ISPW_Release=$$release$$&Owner=$$owner$$
 
 ISPW Webhook Parameter List below
 @param ISPW_Stream - ISPW Stream that had the code promotion
 @param ISPW_Container - ISPW Container that had the code promotion
 @param ISPW_Src_Level - ISPW Level that code was promoted from
 @param ISPW_SetId - ISPW Set that was created for the promotion
 @param ISPW_Release - The ISPW Release Value that will be passed to XL Release
 @param ISPW_Owner - The ISPW Owner value from the ISPW Set that was created for the promotion

 The Pipeline also takes the following parameters from the Jenkins Job
 @param CES_Token - CES Personal Access Token.  These are configured in Compuware Enterprise Services / Security / Personal Access Tokens 
 @param HCI_Conn_ID - HCI Connection ID configured in the Compuware Common Configuration Plugin.  Use Pipepline Syntax Generator to determine this value. 
 @param HCI_Token - The ID of the Jenkins Credential for the TSO ID that will used to execute the pipeline
 @param CES_Connection - The URL of Compuware Enterprise Services
 @param CC_repository - The Compuware Xpediter Code Coverage Repository that the Pipeline will use
 @param Git_Project - Github project/user used to store the Topaz for Total Test Projects
*/
/**
 Below is a list of parameters that is hardcoded into the Pipeline
 @param ISPW_RuntimeConfig - ISPW Runtime Config name
 @param Git_Credentials - Jenkins credentials for logging into git
 @param Git_URL - Url that will be used in various git commands
 @param Git_TTT_Repo - Git repo that contains Topaz for Total Test Projects
 @param Git_Branch - Git brnach to be used by the pipeline
 @param SQ_Scanner_Tests - Name of folder to contain TTT test projects downloaded from github
 @param SQ_Scanner_Name - Name of SonarQube Scanner installation in "Manage Jenkins" -> "Global Tool Configuration" -> "SonarQube Scanner Installations"
 @param SQ_Server_Name - Name of SonarQube Server in "Manage Jenkins" -> "Configure System" -> "Sonar Qube servers"
 @param MF_Source - directory that contains cobol source downloaded from ISPW
 @param XLR_Template - XL Release template to trigger at the end of the Jenkins workflow
 @param XLR_User - XL Release user ID. Configured in Jenkins/Manage Jenkins/Configure System/XL Release credentials
*/

// ISPW Variables for promote/deploy/generate/regress operations
String ISPW_RuntimeConfig   = "ISPW"

// Git Parameters
String Git_Credentials  = "87763671-db9a-47e1-80e7-33c1aba803b1"
String Git_TTT_Repo     = "${ISPW_Stream}_${ISPW_Application}_Unit_Tests.git"
String Git_URL          = "https://www.github.com/${Git_Project}/${Git_TTT_Repo}"
String Git_Branch       = "master"

// Directories for source and tests that are downloaded to the jenkins workspace
String MF_Source            = "MF_Source"

// SonarQube
String SQ_Scanner_Tests     = "tests"           
String SQ_Scanner_Name      = "Scanner"
String SQ_Server_Name       = "CWCC"
String SQ_Project           = "Ralph_Madrid"

// XL Release template to trigger / XL Release user to connect with / The
String XLR_Template         = "A Release from Jenkins - RNU"
String XLR_User             = "xebialabs"

/**
 Helper Methods for the Pipeline Script
*/
/*
def String getISPWContainer(String HCI_Conn, String CES_Token, String Release, String Level)
{

    println "Parms received"
    println "ISPW_Application ${ISPW_Application}"
    println "ISPW_Src_Level ${ISPW_Src_Level}"    
    println "ISPW_Release ${ISPW_Release}"

    //Determine the ISPW container name and type for the current release
    def ISPW_Release_Parm           = 'releaseId=' + Release
    def ISPW_Level_Parm             = '\nlevel=' + Level

    def ISPW_Parms                  = ISPW_Release_Parm + ISPW_Level_Parm

    //Get the Task List for the Release    
    def Response = ispwOperation connectionId: HCI_Conn,
        credentialsId: CES_Token, 
        ispwAction: 'GetReleaseTaskList', 
        ispwRequestBody: ISPW_Parms

    //Convert the response to a JSON Object
    def jsonSlurper         = new JsonSlurper()
    def TaskList            = jsonSlurper.parseText(Response.getContent())

    return TaskList.tasks[0].container.toString()
}
*/

//def ArrayList getTasksInSet(String HCI_Conn, String CES_Token, String Release, String Set, String Level)
def getTasksInSet(String HCI_Conn, String CES_Token, String Release, String Set, String Level)
{
    println "getTasksInSet for"
    println "  Release          : " + Release
    println "  Set              : " + Set
    println "  Level            : " + Level
    println "using"
    println "  HCI Connection   : " + HCI_Conn
    println "  CES Token        : " + CES_Token

    def jsonSlurper         = new JsonSlurper()
    def TaskList        = []
    
    def IspwReleaseParm     = 'releaseId=' + Release
    def IspwSetParm         = 'setId=' + Set

    println "Using "
    println "IspwReleaseParm    " + IspwReleaseParm

    def Response = ispwOperation connectionId: HCI_Conn,
        credentialsId: CES_Token, 
        ispwAction: 'GetReleaseTaskList', 
        ispwRequestBody: IspwReleaseParm
/*
    def ReleaseTasks = jsonSlurper.parseText(Response.getContent())

    Response = ispwOperation connectionId: HCI_Conn,
        credentialsId: CES_Token, 
        ispwAction: 'GetSetTaskList', 
        ispwRequestBody: IspwSetParm
    
    def SetTasks = jsonSlurper.parseText(Response.getContent())

    println "Release Tasks"
    
    ReleaseTasks.tasks.each
    {
        println "Module : " + it.moduleName.toString()
    }

    println "Set Tasks"
    
    SetTasks.tasks.each
    {
        println "Module : " + it.moduleName.toString()
    }
*/    
}
/**
 Determine the ISPW Path Number for use in Total Test
 @param Level - Level Parameter is the Level returned in the ISPW Webhook
*/
def String getPathNum(String Level)
{
    return Level.charAt(Level.length() - 1)
}

/**
 Wrapper around the Git Plugin's Checkout Method
 @param URL - URL for the git server
 @param Branch - The branch that will be checked out of git
 @param Credentials - Jenkins credentials for logging into git
 @param Folder - Folder relative to the workspace that git will check out files into
*/
 def gitcheckout(String URL, String Branch, String Credentials, String Folder)
 {
        println "Scenario " + URL
        println "Scenario " + Branch
        println "Scenario " + Credentials
        checkout changelog: false, poll: false, 
        scm: [$class: 'GitSCM', 
        branches: [[name: '**']], 
        doGenerateSubmoduleConfigurations: false, 
        extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: "${Folder}"]], 
        submoduleCfg: [], 
        userRemoteConfigs: [[credentialsId: "${Credentials}", name: "origin", url: "${URL}"]]]
 }

// One node with several stages => All variables are local to the node and available to all stages
node
{
    def PathNum = getPathNum(ISPW_Src_Level)

    // Use the Path Number to determine the right Runner JCL to use (different STEPLIB concatenations)
    def TTT_Jcl = "Runner_PATH" + PathNum + ".jcl"

    def ISPW_Target_Level = "QA" + PathNum

    //def ISPW_Assignment = getISPWContainer(HCI_Conn_ID, CES_Token, ISPW_Release, ISPW_Target_Level)

    def CC_DDIO_Override     = "SALESSUP.${ISPW_Application}.${ISPW_Target_Level}.SSD"

    // Download all sources from the desired level and above
    println "******************************"
    println "Download Source Code from ISPW"
    println "******************************"

    stage("Download Source Code")
    {

        //getTasksInSet(HCI_Conn_ID, CES_Token, ISPW_Release, ISPW_SetId, ISPW_Src_Level)
    println "getTasksInSet for"
    println "  Release          : " + ISPW_Release
    println "  Set              : " + ISPW_SetId
    println "  Level            : " + ISPW_Src_Level
    println "using"
    println "  HCI Connection   : " + HCI_Conn_ID
    println "  CES Token        : " + CES_Token

    def jsonSlurper         = new JsonSlurper()
    def TaskList        = []
    
    def IspwReleaseParm     = 'releaseId=' + ISPW_Release
    def IspwSetParm         = 'setId=' + ISPW_SetId

    println "Using "
    println "IspwReleaseParm    " + IspwReleaseParm

    def Response = ispwOperation connectionId: HCI_Conn_ID,
        credentialsId: CES_Token, 
        ispwAction: 'GetReleaseTaskList', 
        ispwRequestBody: IspwReleaseParm

    def ReleaseTasks = jsonSlurper.parseText(Response.getContent())

    Response = ispwOperation connectionId: HCI_Conn_ID,
        credentialsId: CES_Token, 
        ispwAction: 'GetSetTaskList', 
        ispwRequestBody: IspwSetParm
    
    def SetTasks = jsonSlurper.parseText(Response.getContent())

    println "Release Tasks"
    
    ReleaseTasks.tasks.each
    {
        println "Module : " + it.moduleName.toString()
    }

    println "Set Tasks"
    
    SetTasks.tasks.each
    {
        println "Module : " + it.moduleName.toString()
    }    

    }
}